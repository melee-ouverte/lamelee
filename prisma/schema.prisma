// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// T024: User Model
// Stores user profile information and authentication data
model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  avatarUrl String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // T060: Soft delete support

  // GitHub OAuth data
  githubId       String  @unique
  githubUsername String
  accessToken    String? // Encrypted in production

  // User statistics (calculated fields)
  experienceCount Int @default(0)
  totalRating     Float @default(0)
  ratingCount     Int @default(0)

  // Relations
  experiences   Experience[]
  comments      Comment[]
  reactions     Reaction[]
  promptRatings PromptRating[]

  @@map("users")
  @@index([githubId])
  @@index([username])
  @@index([createdAt])
  @@index([deletedAt]) // For cleanup queries
}

// T025: Experience Model
// Represents a shared AI coding experience
model Experience {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  githubUrl   String // Validated GitHub repository URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime? // T060: Soft delete support

  // Categorization
  aiAssistant String // e.g., "github-copilot", "claude", "gpt"
  tags        String? // Comma-separated tags for filtering

  // Statistics (calculated fields)
  promptCount   Int @default(0)
  commentCount  Int @default(0)
  reactionCount Int @default(0)
  averageRating Float @default(0)

  // Relations
  userId    Int
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompts   Prompt[]
  comments  Comment[]
  reactions Reaction[]

  @@map("experiences")
  @@index([userId])
  @@index([aiAssistant])
  @@index([createdAt])
  @@index([deletedAt]) // For cleanup queries
  @@index([tags]) // For tag-based filtering (comma-separated string)
}

// T026: Prompt Model
// Individual prompts within an experience
model Prompt {
  id          Int      @id @default(autoincrement())
  content     String // The actual prompt text
  context     String? // Optional context or explanation
  orderIndex  Int // Order within the experience
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime? // T060: Soft delete support

  // Quality metrics
  averageRating Float @default(0)
  ratingCount   Int   @default(0)

  // Relations
  experienceId Int
  experience   Experience     @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  ratings      PromptRating[]

  @@map("prompts")
  @@index([experienceId])
  @@index([orderIndex])
  @@index([createdAt])
  @@index([deletedAt]) // For cleanup queries
}

// T027: Comment Model
// User comments on experiences
model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // T060: Soft delete support

  // Relations
  userId       Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  experienceId Int
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  @@map("comments")
  @@index([userId])
  @@index([experienceId])
  @@index([createdAt])
  @@index([deletedAt]) // For cleanup queries
}

// T028: Reaction Model
// User reactions (helpful, creative, etc.) on experiences
model Reaction {
  id           Int      @id @default(autoincrement())
  reactionType String   // "HELPFUL", "CREATIVE", "EDUCATIONAL", "INNOVATIVE", "PROBLEMATIC"
  createdAt    DateTime @default(now())

  // Relations
  userId       Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  experienceId Int
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  // Ensure one reaction per user per experience
  @@unique([userId, experienceId])
  @@map("reactions")
  @@index([userId])
  @@index([experienceId])
  @@index([reactionType])
}

// T029: PromptRating Model
// Quality ratings for individual prompts (1-5 scale)
model PromptRating {
  id        Int      @id @default(autoincrement())
  rating    Int // 1-5 scale
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId   Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  promptId Int
  prompt   Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  // Ensure one rating per user per prompt
  @@unique([userId, promptId])
  @@map("prompt_ratings")
  @@index([userId])
  @@index([promptId])
  @@index([rating])
}

// Note: ReactionType values stored as strings in SQLite
// Valid values: "HELPFUL", "CREATIVE", "EDUCATIONAL", "INNOVATIVE", "PROBLEMATIC"
